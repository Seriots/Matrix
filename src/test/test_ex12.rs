
#[cfg(test)]
#[test]
fn test_inverse() {
    use crate::Matrix;

    let u = Matrix::from(&[
        &[1., -1., 1.],
        &[2., 3., 0.],
        &[0., -2., 1.],
    ]);
    assert_eq!(u.inverse().unwrap(), Matrix::from(&[
        &[3., -1., -3.],
        &[-2., 1., 2.],
        &[-4., 2., 5.],
    ]));
    let u = Matrix::from(&[
        &[1., 0., 0.],
        &[0., 1., 0.],
        &[0., 0., 1.],
    ]);
    assert_eq!(u.inverse().unwrap(), Matrix::from(&[
        &[1., 0., 0.],
        &[0., 1., 0.],
        &[0., 0., 1.],
    ]));
    // [1.0, 0.0, 0.0]
    // [0.0, 1.0, 0.0]
    // [0.0, 0.0, 1.0]
    let u = Matrix::from(&[
        &[2., 0., 0.],
        &[0., 2., 0.],
        &[0., 0., 2.],
    ]);
    assert_eq!(u.inverse().unwrap(), Matrix::from(&[
        &[0.5, 0., 0.],
        &[0., 0.5, 0.],
        &[0., 0., 0.5],
    ]));
    // [0.5, 0.0, 0.0]
    // [0.0, 0.5, 0.0]
    // [0.0, 0.0, 0.5]
    let u = Matrix::from(&[
        &[8., 5., -2.],
        &[4., 7., 20.],
        &[7., 6., 1.],
    ]);
    assert_eq!(u.inverse().unwrap(), Matrix::from(&[
        &[0.649425287, 0.097701149, -0.655172414],
        &[-0.781609195, -0.126436782, 0.965517241],
        &[0.143678161, 0.074712644, -0.206896552],
    ]));
    // [0.649425287, 0.097701149, -0.655172414]
    // [-0.781609195, -0.126436782, 0.965517241]
    // [0.143678161, 0.074712644, -0.206896552]
}